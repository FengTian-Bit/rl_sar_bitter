# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_msgs/Observation.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Observation(genpy.Message):
  _md5sum = "1cf74daf5018ef55d2264614972f54c9"
  _type = "robot_msgs/Observation"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#可单取出来
float32[3] ang_vel   # 角速度 wx, wy, wz
float32[3] gravity_vec  
float32[3] commands
float32[16] dof_pos
float32[16] dof_vel
float32[16] actions
#总观测量
float32[57] obs
"""
  __slots__ = ['ang_vel','gravity_vec','commands','dof_pos','dof_vel','actions','obs']
  _slot_types = ['float32[3]','float32[3]','float32[3]','float32[16]','float32[16]','float32[16]','float32[57]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ang_vel,gravity_vec,commands,dof_pos,dof_vel,actions,obs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Observation, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ang_vel is None:
        self.ang_vel = [0.] * 3
      if self.gravity_vec is None:
        self.gravity_vec = [0.] * 3
      if self.commands is None:
        self.commands = [0.] * 3
      if self.dof_pos is None:
        self.dof_pos = [0.] * 16
      if self.dof_vel is None:
        self.dof_vel = [0.] * 16
      if self.actions is None:
        self.actions = [0.] * 16
      if self.obs is None:
        self.obs = [0.] * 57
    else:
      self.ang_vel = [0.] * 3
      self.gravity_vec = [0.] * 3
      self.commands = [0.] * 3
      self.dof_pos = [0.] * 16
      self.dof_vel = [0.] * 16
      self.actions = [0.] * 16
      self.obs = [0.] * 57

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3f().pack(*self.ang_vel))
      buff.write(_get_struct_3f().pack(*self.gravity_vec))
      buff.write(_get_struct_3f().pack(*self.commands))
      buff.write(_get_struct_16f().pack(*self.dof_pos))
      buff.write(_get_struct_16f().pack(*self.dof_vel))
      buff.write(_get_struct_16f().pack(*self.actions))
      buff.write(_get_struct_57f().pack(*self.obs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 12
      self.ang_vel = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.gravity_vec = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.commands = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 64
      self.dof_pos = _get_struct_16f().unpack(str[start:end])
      start = end
      end += 64
      self.dof_vel = _get_struct_16f().unpack(str[start:end])
      start = end
      end += 64
      self.actions = _get_struct_16f().unpack(str[start:end])
      start = end
      end += 228
      self.obs = _get_struct_57f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.ang_vel.tostring())
      buff.write(self.gravity_vec.tostring())
      buff.write(self.commands.tostring())
      buff.write(self.dof_pos.tostring())
      buff.write(self.dof_vel.tostring())
      buff.write(self.actions.tostring())
      buff.write(self.obs.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 12
      self.ang_vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.gravity_vec = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.commands = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 64
      self.dof_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=16)
      start = end
      end += 64
      self.dof_vel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=16)
      start = end
      end += 64
      self.actions = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=16)
      start = end
      end += 228
      self.obs = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=57)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16f = None
def _get_struct_16f():
    global _struct_16f
    if _struct_16f is None:
        _struct_16f = struct.Struct("<16f")
    return _struct_16f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_57f = None
def _get_struct_57f():
    global _struct_57f
    if _struct_57f is None:
        _struct_57f = struct.Struct("<57f")
    return _struct_57f
