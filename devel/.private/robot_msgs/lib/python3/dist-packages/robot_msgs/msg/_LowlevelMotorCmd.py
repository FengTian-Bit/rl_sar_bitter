# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_msgs/LowlevelMotorCmd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LowlevelMotorCmd(genpy.Message):
  _md5sum = "287e30467db2eeba6fc4bc80506a1206"
  _type = "robot_msgs/LowlevelMotorCmd"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# uint8 mode           # motor target mode
# float32 q            # motor target position
# float32 dq           # motor target velocity
# float32 tau          # motor target torque
# float32 Kp           # motor spring stiffness coefficient
# float32 Kd           # motor damper coefficient
# uint32[3] reserve    # motor target torque

# uint8 mode           # 电机当前模式
uint8 id                # 电机ID
float32 q            # 电机当前位置（弧度）
float32 dq           # 电机当前速度（弧度/秒）
float32 tau          # 当前输出扭矩（牛·米）
#Kp ，Kd，反转参数reverse
float32 Kp
float32 Kd
float32 Kvp
float32 Kvi
#uint8 rv #反转参数
# int8 temperature     # 电机温度（由于温度传导缓慢，存在滞后现象）"""
  __slots__ = ['id','q','dq','tau','Kp','Kd','Kvp','Kvi']
  _slot_types = ['uint8','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,q,dq,tau,Kp,Kd,Kvp,Kvi

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LowlevelMotorCmd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.q is None:
        self.q = 0.
      if self.dq is None:
        self.dq = 0.
      if self.tau is None:
        self.tau = 0.
      if self.Kp is None:
        self.Kp = 0.
      if self.Kd is None:
        self.Kd = 0.
      if self.Kvp is None:
        self.Kvp = 0.
      if self.Kvi is None:
        self.Kvi = 0.
    else:
      self.id = 0
      self.q = 0.
      self.dq = 0.
      self.tau = 0.
      self.Kp = 0.
      self.Kd = 0.
      self.Kvp = 0.
      self.Kvi = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B7f().pack(_x.id, _x.q, _x.dq, _x.tau, _x.Kp, _x.Kd, _x.Kvp, _x.Kvi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.id, _x.q, _x.dq, _x.tau, _x.Kp, _x.Kd, _x.Kvp, _x.Kvi,) = _get_struct_B7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B7f().pack(_x.id, _x.q, _x.dq, _x.tau, _x.Kp, _x.Kd, _x.Kvp, _x.Kvi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.id, _x.q, _x.dq, _x.tau, _x.Kp, _x.Kd, _x.Kvp, _x.Kvi,) = _get_struct_B7f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B7f = None
def _get_struct_B7f():
    global _struct_B7f
    if _struct_B7f is None:
        _struct_B7f = struct.Struct("<B7f")
    return _struct_B7f
