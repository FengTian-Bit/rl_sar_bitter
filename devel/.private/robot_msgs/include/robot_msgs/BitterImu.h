// Generated by gencpp from file robot_msgs/BitterImu.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_BITTERIMU_H
#define ROBOT_MSGS_MESSAGE_BITTERIMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace robot_msgs
{
template <class ContainerAllocator>
struct BitterImu_
{
  typedef BitterImu_<ContainerAllocator> Type;

  BitterImu_()
    : header()
    , quat()
    , angular_vel_local()
    , linear_acc_local()
    , orientation_cov()
    , angular_vel_cov()
    , linear_acc_cov()  {
      quat.assign(0.0);

      angular_vel_local.assign(0.0);

      linear_acc_local.assign(0.0);

      orientation_cov.assign(0.0);

      angular_vel_cov.assign(0.0);

      linear_acc_cov.assign(0.0);
  }
  BitterImu_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , quat()
    , angular_vel_local()
    , linear_acc_local()
    , orientation_cov()
    , angular_vel_cov()
    , linear_acc_cov()  {
  (void)_alloc;
      quat.assign(0.0);

      angular_vel_local.assign(0.0);

      linear_acc_local.assign(0.0);

      orientation_cov.assign(0.0);

      angular_vel_cov.assign(0.0);

      linear_acc_cov.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<double, 4>  _quat_type;
  _quat_type quat;

   typedef boost::array<double, 3>  _angular_vel_local_type;
  _angular_vel_local_type angular_vel_local;

   typedef boost::array<double, 3>  _linear_acc_local_type;
  _linear_acc_local_type linear_acc_local;

   typedef boost::array<double, 9>  _orientation_cov_type;
  _orientation_cov_type orientation_cov;

   typedef boost::array<double, 9>  _angular_vel_cov_type;
  _angular_vel_cov_type angular_vel_cov;

   typedef boost::array<double, 9>  _linear_acc_cov_type;
  _linear_acc_cov_type linear_acc_cov;





  typedef boost::shared_ptr< ::robot_msgs::BitterImu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::BitterImu_<ContainerAllocator> const> ConstPtr;

}; // struct BitterImu_

typedef ::robot_msgs::BitterImu_<std::allocator<void> > BitterImu;

typedef boost::shared_ptr< ::robot_msgs::BitterImu > BitterImuPtr;
typedef boost::shared_ptr< ::robot_msgs::BitterImu const> BitterImuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::BitterImu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::BitterImu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::BitterImu_<ContainerAllocator1> & lhs, const ::robot_msgs::BitterImu_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.quat == rhs.quat &&
    lhs.angular_vel_local == rhs.angular_vel_local &&
    lhs.linear_acc_local == rhs.linear_acc_local &&
    lhs.orientation_cov == rhs.orientation_cov &&
    lhs.angular_vel_cov == rhs.angular_vel_cov &&
    lhs.linear_acc_cov == rhs.linear_acc_cov;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::BitterImu_<ContainerAllocator1> & lhs, const ::robot_msgs::BitterImu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::BitterImu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::BitterImu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::BitterImu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::BitterImu_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::BitterImu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::BitterImu_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::BitterImu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f4e8b4bfb725baef44f23478818d1c0";
  }

  static const char* value(const ::robot_msgs::BitterImu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f4e8b4bfb725baeULL;
  static const uint64_t static_value2 = 0xf44f23478818d1c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::BitterImu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/BitterImu";
  }

  static const char* value(const ::robot_msgs::BitterImu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::BitterImu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 自定义IMU消息格式\n"
"Header header # ROS标准消息头\n"
"\n"
"# 四元数姿态 (x, y, z, w)\n"
"float64[4] quat\n"
"\n"
"# 角速度 (单位: rad/s)\n"
"float64[3] angular_vel_local\n"
"\n"
"# 线性加速度 (单位: m/s²)\n"
"float64[3] linear_acc_local\n"
"\n"
"# 协方差矩阵 (3x3, 按行优先展开)\n"
"float64[9] orientation_cov # 姿态协方差\n"
"float64[9] angular_vel_cov # 角速度协方差\n"
"float64[9] linear_acc_cov # 加速度协方差\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::robot_msgs::BitterImu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::BitterImu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.quat);
      stream.next(m.angular_vel_local);
      stream.next(m.linear_acc_local);
      stream.next(m.orientation_cov);
      stream.next(m.angular_vel_cov);
      stream.next(m.linear_acc_cov);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BitterImu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::BitterImu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::BitterImu_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "quat: ";
    if (v.quat.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.quat.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.quat[i]);
    }
    if (v.quat.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "angular_vel_local: ";
    if (v.angular_vel_local.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.angular_vel_local.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.angular_vel_local[i]);
    }
    if (v.angular_vel_local.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "linear_acc_local: ";
    if (v.linear_acc_local.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.linear_acc_local.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.linear_acc_local[i]);
    }
    if (v.linear_acc_local.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "orientation_cov: ";
    if (v.orientation_cov.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.orientation_cov.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.orientation_cov[i]);
    }
    if (v.orientation_cov.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "angular_vel_cov: ";
    if (v.angular_vel_cov.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.angular_vel_cov.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.angular_vel_cov[i]);
    }
    if (v.angular_vel_cov.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "linear_acc_cov: ";
    if (v.linear_acc_cov.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.linear_acc_cov.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.linear_acc_cov[i]);
    }
    if (v.linear_acc_cov.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_BITTERIMU_H
