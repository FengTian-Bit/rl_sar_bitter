// Generated by gencpp from file robot_msgs/LowlevelMotorState.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_LOWLEVELMOTORSTATE_H
#define ROBOT_MSGS_MESSAGE_LOWLEVELMOTORSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace robot_msgs
{
template <class ContainerAllocator>
struct LowlevelMotorState_
{
  typedef LowlevelMotorState_<ContainerAllocator> Type;

  LowlevelMotorState_()
    : stamp()
    , id(0)
    , q(0.0)
    , dq(0.0)
    , tau(0.0)
    , Kp(0.0)
    , Kd(0.0)  {
    }
  LowlevelMotorState_(const ContainerAllocator& _alloc)
    : stamp(_alloc)
    , id(0)
    , q(0.0)
    , dq(0.0)
    , tau(0.0)
    , Kp(0.0)
    , Kd(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _stamp_type;
  _stamp_type stamp;

   typedef uint8_t _id_type;
  _id_type id;

   typedef float _q_type;
  _q_type q;

   typedef float _dq_type;
  _dq_type dq;

   typedef float _tau_type;
  _tau_type tau;

   typedef float _Kp_type;
  _Kp_type Kp;

   typedef float _Kd_type;
  _Kd_type Kd;





  typedef boost::shared_ptr< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> const> ConstPtr;

}; // struct LowlevelMotorState_

typedef ::robot_msgs::LowlevelMotorState_<std::allocator<void> > LowlevelMotorState;

typedef boost::shared_ptr< ::robot_msgs::LowlevelMotorState > LowlevelMotorStatePtr;
typedef boost::shared_ptr< ::robot_msgs::LowlevelMotorState const> LowlevelMotorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::LowlevelMotorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::LowlevelMotorState_<ContainerAllocator1> & lhs, const ::robot_msgs::LowlevelMotorState_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.id == rhs.id &&
    lhs.q == rhs.q &&
    lhs.dq == rhs.dq &&
    lhs.tau == rhs.tau &&
    lhs.Kp == rhs.Kp &&
    lhs.Kd == rhs.Kd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::LowlevelMotorState_<ContainerAllocator1> & lhs, const ::robot_msgs::LowlevelMotorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7be5bb1e36dfe9f0c461b081b3c9bca9";
  }

  static const char* value(const ::robot_msgs::LowlevelMotorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7be5bb1e36dfe9f0ULL;
  static const uint64_t static_value2 = 0xc461b081b3c9bca9ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/LowlevelMotorState";
  }

  static const char* value(const ::robot_msgs::LowlevelMotorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#时间戳\n"
"std_msgs/Header stamp\n"
"# uint8 mode           # 电机当前模式\n"
"uint8 id                # 电机ID\n"
"float32 q            # 电机当前位置（弧度）\n"
"float32 dq           # 电机当前速度（弧度/秒）\n"
"float32 tau          # 当前输出扭矩（牛·米）\n"
"#Kp ，Kd，反转参数reverse\n"
"float32 Kp\n"
"float32 Kd\n"
"#uint8 rv\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::robot_msgs::LowlevelMotorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.id);
      stream.next(m.q);
      stream.next(m.dq);
      stream.next(m.tau);
      stream.next(m.Kp);
      stream.next(m.Kd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LowlevelMotorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::LowlevelMotorState_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "stamp: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.stamp);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "q: ";
    Printer<float>::stream(s, indent + "  ", v.q);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "dq: ";
    Printer<float>::stream(s, indent + "  ", v.dq);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "tau: ";
    Printer<float>::stream(s, indent + "  ", v.tau);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Kp: ";
    Printer<float>::stream(s, indent + "  ", v.Kp);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Kd: ";
    Printer<float>::stream(s, indent + "  ", v.Kd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_LOWLEVELMOTORSTATE_H
