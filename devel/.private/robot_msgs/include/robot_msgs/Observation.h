// Generated by gencpp from file robot_msgs/Observation.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_OBSERVATION_H
#define ROBOT_MSGS_MESSAGE_OBSERVATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct Observation_
{
  typedef Observation_<ContainerAllocator> Type;

  Observation_()
    : ang_vel()
    , gravity_vec()
    , commands()
    , dof_pos()
    , dof_vel()
    , actions()
    , obs()  {
      ang_vel.assign(0.0);

      gravity_vec.assign(0.0);

      commands.assign(0.0);

      dof_pos.assign(0.0);

      dof_vel.assign(0.0);

      actions.assign(0.0);

      obs.assign(0.0);
  }
  Observation_(const ContainerAllocator& _alloc)
    : ang_vel()
    , gravity_vec()
    , commands()
    , dof_pos()
    , dof_vel()
    , actions()
    , obs()  {
  (void)_alloc;
      ang_vel.assign(0.0);

      gravity_vec.assign(0.0);

      commands.assign(0.0);

      dof_pos.assign(0.0);

      dof_vel.assign(0.0);

      actions.assign(0.0);

      obs.assign(0.0);
  }



   typedef boost::array<float, 3>  _ang_vel_type;
  _ang_vel_type ang_vel;

   typedef boost::array<float, 3>  _gravity_vec_type;
  _gravity_vec_type gravity_vec;

   typedef boost::array<float, 3>  _commands_type;
  _commands_type commands;

   typedef boost::array<float, 16>  _dof_pos_type;
  _dof_pos_type dof_pos;

   typedef boost::array<float, 16>  _dof_vel_type;
  _dof_vel_type dof_vel;

   typedef boost::array<float, 16>  _actions_type;
  _actions_type actions;

   typedef boost::array<float, 57>  _obs_type;
  _obs_type obs;





  typedef boost::shared_ptr< ::robot_msgs::Observation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::Observation_<ContainerAllocator> const> ConstPtr;

}; // struct Observation_

typedef ::robot_msgs::Observation_<std::allocator<void> > Observation;

typedef boost::shared_ptr< ::robot_msgs::Observation > ObservationPtr;
typedef boost::shared_ptr< ::robot_msgs::Observation const> ObservationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::Observation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::Observation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::Observation_<ContainerAllocator1> & lhs, const ::robot_msgs::Observation_<ContainerAllocator2> & rhs)
{
  return lhs.ang_vel == rhs.ang_vel &&
    lhs.gravity_vec == rhs.gravity_vec &&
    lhs.commands == rhs.commands &&
    lhs.dof_pos == rhs.dof_pos &&
    lhs.dof_vel == rhs.dof_vel &&
    lhs.actions == rhs.actions &&
    lhs.obs == rhs.obs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::Observation_<ContainerAllocator1> & lhs, const ::robot_msgs::Observation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::Observation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::Observation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::Observation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::Observation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::Observation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::Observation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1cf74daf5018ef55d2264614972f54c9";
  }

  static const char* value(const ::robot_msgs::Observation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1cf74daf5018ef55ULL;
  static const uint64_t static_value2 = 0xd2264614972f54c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/Observation";
  }

  static const char* value(const ::robot_msgs::Observation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#可单取出来\n"
"float32[3] ang_vel   # 角速度 wx, wy, wz\n"
"float32[3] gravity_vec  \n"
"float32[3] commands\n"
"float32[16] dof_pos\n"
"float32[16] dof_vel\n"
"float32[16] actions\n"
"#总观测量\n"
"float32[57] obs\n"
;
  }

  static const char* value(const ::robot_msgs::Observation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::Observation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ang_vel);
      stream.next(m.gravity_vec);
      stream.next(m.commands);
      stream.next(m.dof_pos);
      stream.next(m.dof_vel);
      stream.next(m.actions);
      stream.next(m.obs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Observation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::Observation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::Observation_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "ang_vel: ";
    if (v.ang_vel.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.ang_vel.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.ang_vel[i]);
    }
    if (v.ang_vel.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "gravity_vec: ";
    if (v.gravity_vec.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.gravity_vec.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.gravity_vec[i]);
    }
    if (v.gravity_vec.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "commands: ";
    if (v.commands.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.commands.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.commands[i]);
    }
    if (v.commands.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "dof_pos: ";
    if (v.dof_pos.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.dof_pos.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.dof_pos[i]);
    }
    if (v.dof_pos.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "dof_vel: ";
    if (v.dof_vel.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.dof_vel.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.dof_vel[i]);
    }
    if (v.dof_vel.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "actions: ";
    if (v.actions.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.actions.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.actions[i]);
    }
    if (v.actions.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "obs: ";
    if (v.obs.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.obs.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.obs[i]);
    }
    if (v.obs.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_OBSERVATION_H
