// Generated by gencpp from file robot_msgs/LowlevelState.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_LOWLEVELSTATE_H
#define ROBOT_MSGS_MESSAGE_LOWLEVELSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_msgs/LowlevelMotorState.h>

namespace robot_msgs
{
template <class ContainerAllocator>
struct LowlevelState_
{
  typedef LowlevelState_<ContainerAllocator> Type;

  LowlevelState_()
    : motorState()  {
    }
  LowlevelState_(const ContainerAllocator& _alloc)
    : motorState()  {
  (void)_alloc;
      motorState.assign( ::robot_msgs::LowlevelMotorState_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> , 16>  _motorState_type;
  _motorState_type motorState;





  typedef boost::shared_ptr< ::robot_msgs::LowlevelState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::LowlevelState_<ContainerAllocator> const> ConstPtr;

}; // struct LowlevelState_

typedef ::robot_msgs::LowlevelState_<std::allocator<void> > LowlevelState;

typedef boost::shared_ptr< ::robot_msgs::LowlevelState > LowlevelStatePtr;
typedef boost::shared_ptr< ::robot_msgs::LowlevelState const> LowlevelStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::LowlevelState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::LowlevelState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::LowlevelState_<ContainerAllocator1> & lhs, const ::robot_msgs::LowlevelState_<ContainerAllocator2> & rhs)
{
  return lhs.motorState == rhs.motorState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::LowlevelState_<ContainerAllocator1> & lhs, const ::robot_msgs::LowlevelState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::LowlevelState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::LowlevelState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::LowlevelState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::LowlevelState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::LowlevelState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::LowlevelState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::LowlevelState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "039d2d311ce4c771aaf577626734f296";
  }

  static const char* value(const ::robot_msgs::LowlevelState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x039d2d311ce4c771ULL;
  static const uint64_t static_value2 = 0xaaf577626734f296ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::LowlevelState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/LowlevelState";
  }

  static const char* value(const ::robot_msgs::LowlevelState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::LowlevelState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LowlevelMotorState[16] motorState\n"
"================================================================================\n"
"MSG: robot_msgs/LowlevelMotorState\n"
"#时间戳\n"
"std_msgs/Header stamp\n"
"# uint8 mode           # 电机当前模式\n"
"uint8 id                # 电机ID\n"
"float32 q            # 电机当前位置（弧度）\n"
"float32 dq           # 电机当前速度（弧度/秒）\n"
"float32 tau          # 当前输出扭矩（牛·米）\n"
"#Kp ，Kd，反转参数reverse\n"
"float32 Kp\n"
"float32 Kd\n"
"#uint8 rv\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::robot_msgs::LowlevelState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::LowlevelState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motorState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LowlevelState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::LowlevelState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::LowlevelState_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "motorState: ";
    if (v.motorState.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.motorState.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::robot_msgs::LowlevelMotorState_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.motorState[i]);
    }
    if (v.motorState.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_LOWLEVELSTATE_H
