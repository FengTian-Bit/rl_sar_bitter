// Generated by gencpp from file robot_msgs/LowlevelCmd.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_LOWLEVELCMD_H
#define ROBOT_MSGS_MESSAGE_LOWLEVELCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_msgs/LowlevelMotorCmd.h>

namespace robot_msgs
{
template <class ContainerAllocator>
struct LowlevelCmd_
{
  typedef LowlevelCmd_<ContainerAllocator> Type;

  LowlevelCmd_()
    : motorCmd()  {
    }
  LowlevelCmd_(const ContainerAllocator& _alloc)
    : motorCmd()  {
  (void)_alloc;
      motorCmd.assign( ::robot_msgs::LowlevelMotorCmd_<ContainerAllocator> (_alloc));
  }



   typedef boost::array< ::robot_msgs::LowlevelMotorCmd_<ContainerAllocator> , 16>  _motorCmd_type;
  _motorCmd_type motorCmd;





  typedef boost::shared_ptr< ::robot_msgs::LowlevelCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::LowlevelCmd_<ContainerAllocator> const> ConstPtr;

}; // struct LowlevelCmd_

typedef ::robot_msgs::LowlevelCmd_<std::allocator<void> > LowlevelCmd;

typedef boost::shared_ptr< ::robot_msgs::LowlevelCmd > LowlevelCmdPtr;
typedef boost::shared_ptr< ::robot_msgs::LowlevelCmd const> LowlevelCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::LowlevelCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::LowlevelCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::LowlevelCmd_<ContainerAllocator1> & lhs, const ::robot_msgs::LowlevelCmd_<ContainerAllocator2> & rhs)
{
  return lhs.motorCmd == rhs.motorCmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::LowlevelCmd_<ContainerAllocator1> & lhs, const ::robot_msgs::LowlevelCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::LowlevelCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::LowlevelCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::LowlevelCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::LowlevelCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::LowlevelCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::LowlevelCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::LowlevelCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b8ca0cf47ba441d44c5cb8cd95d8693";
  }

  static const char* value(const ::robot_msgs::LowlevelCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b8ca0cf47ba441dULL;
  static const uint64_t static_value2 = 0x44c5cb8cd95d8693ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::LowlevelCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/LowlevelCmd";
  }

  static const char* value(const ::robot_msgs::LowlevelCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::LowlevelCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LowlevelMotorCmd[16] motorCmd\n"
"================================================================================\n"
"MSG: robot_msgs/LowlevelMotorCmd\n"
"# uint8 mode           # motor target mode\n"
"# float32 q            # motor target position\n"
"# float32 dq           # motor target velocity\n"
"# float32 tau          # motor target torque\n"
"# float32 Kp           # motor spring stiffness coefficient\n"
"# float32 Kd           # motor damper coefficient\n"
"# uint32[3] reserve    # motor target torque\n"
"\n"
"# uint8 mode           # 电机当前模式\n"
"uint8 id                # 电机ID\n"
"float32 q            # 电机当前位置（弧度）\n"
"float32 dq           # 电机当前速度（弧度/秒）\n"
"float32 tau          # 当前输出扭矩（牛·米）\n"
"#Kp ，Kd，反转参数reverse\n"
"float32 Kp\n"
"float32 Kd\n"
"float32 Kvp\n"
"float32 Kvi\n"
"#uint8 rv #反转参数\n"
"# int8 temperature     # 电机温度（由于温度传导缓慢，存在滞后现象）\n"
;
  }

  static const char* value(const ::robot_msgs::LowlevelCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::LowlevelCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motorCmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LowlevelCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::LowlevelCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::LowlevelCmd_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "motorCmd: ";
    if (v.motorCmd.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.motorCmd.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::robot_msgs::LowlevelMotorCmd_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.motorCmd[i]);
    }
    if (v.motorCmd.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_LOWLEVELCMD_H
